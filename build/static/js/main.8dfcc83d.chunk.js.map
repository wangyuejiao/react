{"version":3,"sources":["Showtime.js","Todolist/Todoinput.js","Todolist/Todoing.js","Todolist/Todolist.js","index.js"],"names":["Component","Todoinput","handleInput","e","keyCode","console","log","target","value","props","add","handleChange","setState","name","bind","state","a","b","c","this","refs","focus","ref","onChange","onKeyDown","type","parseInt","inp","onClick","Todoing","todo","map","item","idx","key","del","defaultProps","Todolist","addItem","data","delItem","splice","ReactDOM","render","document","getElementById","className"],"mappings":"mLAIuBA,Y,6BCAFC,E,YAEhB,aAAc,IAAD,8BAEV,+CAYJC,YAAY,SAACC,GAEQ,KAAdA,EAAEC,UAEDC,QAAQC,IAAIH,EAAEI,OAAOC,OAErB,EAAKC,MAAMC,QApBL,EAyBlBC,aAAa,SAACR,GACV,EAAKS,SAAL,eACKT,EAAEI,OAAOM,KAAMV,EAAEI,OAAOC,SAvBxB,EAAKN,YAAc,EAAKA,YAAYY,KAAjB,gBACjB,EAAKC,MAAM,CACPC,EAAE,GACFC,EAAE,GACFC,EAAE,IARC,E,iFAgCdb,QAAQC,IAAIa,KAAKC,KAAKJ,GACtBG,KAAKC,KAAKJ,EAAEK,U,+BAEF,IAAD,OAEL,OAEK,6BAKG,2BAAOC,IAAI,IAAGT,KAAK,IAAGU,SAAUJ,KAAKR,aAAcH,MAAOW,KAAKJ,MAAMC,EAAGQ,UAAWL,KAAKjB,YAAauB,KAAK,SAL7G,IAOG,2BAAOZ,KAAK,IAAIU,SAAUJ,KAAKR,aAAcH,MAAOW,KAAKJ,MAAME,EAAGO,UAAWL,KAAKjB,YAAauB,KAAK,SAPvG,IASG,2BAAOZ,KAAK,IAAIU,SAAUJ,KAAKR,aAAcH,MAAOW,KAAKJ,MAAMG,EAAGM,UAAWL,KAAKjB,YAAauB,KAAK,SATvG,IAWG,2BAAIC,SAAwB,KAAfP,KAAKJ,MAAMC,EAAO,EAAEG,KAAKJ,MAAMC,GAAGU,SAAwB,KAAfP,KAAKJ,MAAME,EAAO,EAAEE,KAAKJ,MAAME,GAAGS,SAAwB,KAAfP,KAAKJ,MAAMG,EAAO,EAAEC,KAAKJ,MAAMG,IAOlI,2BAAOI,IAAK,SAACK,GAAO,EAAKA,IAAIA,GAAMF,KAAK,SAGxC,4BAAQG,QAAS,WAAKvB,QAAQC,IAAI,EAAKqB,IAAInB,SAA3C,qB,GA9DuBR,aCMlB6B,G,uLACP,IAAD,OACAC,EAAQX,KAAKV,MAAbqB,KACL,OACI,4BAEQA,EAAKC,KAAI,SAACC,EAAKC,GAAN,OACL,wBAAIC,IAAKD,GACJD,EADL,MACa,4BAAQJ,QAAS,kBAAI,EAAKnB,MAAM0B,IAAIF,KAApC,yB,GARAjC,cAuBrC6B,EAAQO,aACR,CACIN,KAAK,CAAC,EAAE,EAAE,EAAE,I,IC9BKO,E,YACjB,aAAc,IAAD,8BACT,+CAsBJC,QAAU,SAACC,GAEP,EAAK3B,SAAS,CACVkB,KAAK,GAAD,mBAAM,EAAKf,MAAMe,MAAjB,CAAsBS,OA1BrB,EA6BbC,QAAU,SAACP,GAEP,IAAIH,EAAI,YAAO,EAAKf,MAAMe,MAC1BA,EAAKW,OAAOR,EAAI,GAEhB,EAAKrB,UAAS,SAACG,EAAMN,GAEjB,OADAJ,QAAQC,IAAIS,EAAMe,MACX,CACHA,KAAMA,OAnCd,EAAKf,MAAQ,CACTe,KAAK,CAAC,EAAE,EAAE,GACVd,EAAE,IACFC,EAAE,KALG,E,sEAmDT,OACI,6BACI,kBAAC,EAAD,CAAWP,IAAKS,KAAKmB,UACrB,kBAAC,EAAD,CAASH,IAAKhB,KAAKqB,QAASV,KAAMX,KAAKJ,MAAMe,Y,GAvDvB9B,aC0CtC0C,IAASC,OAEL,kBAAC,EAAD,MAEAC,SAASC,eAAe,SAkOlBD,SAASC,eAAe,QAU9BC,UAAY,U","file":"static/js/main.8dfcc83d.chunk.js","sourcesContent":["import React,{Fragment,Component} from 'react'; //React库\n\n\n//类定义组件\nclass ShowTime extends Component{//声明时直接导出 export default class ShowTime extends Component\n    constructor(){\n        super();//将父类的this传递给子类\n        this.state = {\n            time: new Date().toLocaleString(),\n            a:100,\n            b:200\n        }\n        setInterval(()=>{\n            this.setState({\n                time: new Date().toLocaleString()\n            })//使页面进行改变\n        },1000)\n    }\n\n\n    shouldComponentUpdate(){\n        if(this.state.a>10){\n            return true;\n        }\n        return false;\n    }\n    \n\n    componentDidUpdate(preProps,preState,data){\n        console.log(\"didupdate\");\n        // console.log(data);\n        console.log(preProps);\n        console.log(preState);\n        \n    }\n    getSnapshotBeforeUpdate(){\n        console.log(\"getSnapshot\");\n        return {name:this.state.name}\n    }\n    componentDidMount(){\n        console.log(\"didmount\");\n    }\n\n\n\n    render(){\n        console.log('render');\n        //一\n        var {name,age} = this.props;\n        return(\n            <Fragment>\n                {/* 条件渲染  某种情况下再显示*/}\n\n                {/* 三目运算符 */}\n                {name.length>5?<div>姓名:{name}</div>:''}\n                {/* 短路操作 */}\n                {name.length>5&&<div>姓名:{name}</div>}\n\n                <div>{this.state.time}</div>\n                {/* <div>姓名:{name}</div> */}\n                {/* <div>年龄:{age}</div> */}\n                {/**循环渲染 */}\n                <div>\n                    {\n                        // age.map((item,index)=>{\n                        //     return <p key={index}>{item}</p>\n                        // })\n                        // age.map((item)=>{\n                        //     return <p key={item}>{item}</p>\n                        // })\n\n                        // 显示偶数\n                        age.map((item,index)=>{\n                            if(index%2 === 0){\n                                return <p key={index}>{item}</p>\n                            }                            \n                        })\n\n                    }\n                </div>\n            </Fragment>\n        )\n        //二\n        // return(\n        //     <Fragment>\n        //         <div>姓名:{this.props.name}</div>\n        //         <div>年龄:{this.props.age}</div>\n        //     </Fragment>\n        // )\n    }\n}\n\n//import导入 \n//export导出\n\n//默认导出：只能导出一次，在被引入组件时，可以重命名 import Showtime from './Showtime'; 前面的showtime\nexport default ShowTime;\n\n//命名导出:可以导出多个，被引入时与导出的名一致\n// export{ShowTime};\n// export const num = 100;\n// export const num1 = 200;\n","import React, { Component } from 'react'\r\n//受控组件：value值被react控制的表单元素\r\n//可以实时获取表单元素的值（表单验证）,写法相对麻烦\r\n\r\nexport default class Todoinput extends Component {\r\n\r\n     constructor(){\r\n\r\n        super();\r\n\r\n         this.handleInput = this.handleInput.bind(this);\r\n           this.state={\r\n               a:'',\r\n               b:'',\r\n               c:''\r\n           }\r\n           \r\n\r\n     }\r\n\r\n    handleInput=(e)=>{\r\n        //绑定this，事件处理函数写成箭头函数，或者用bind\r\n        if(e.keyCode === 13){\r\n\r\n            console.log(e.target.value);\r\n\r\n            this.props.add();\r\n\r\n        }\r\n\r\n    }\r\nhandleChange=(e)=>{\r\n    this.setState({\r\n        [e.target.name]:e.target.value\r\n        //加上中括号代表变量，可以获取abc不同的框\r\n    })\r\n}\r\ncomponentDidMount(){\r\n    console.log(this.refs.a);\r\n    this.refs.a.focus();\r\n}\r\n    render() {\r\n\r\n        return (\r\n\r\n             <div>\r\n{/* state当前组件存数据的一个对象 */}\r\n{/* 改变一个框值，三个都会变，改成三个变量，就可以解决 */}\r\n{/* ref={(inp)=>{this.a=inp}} name=\"a\"替换成ref='a',刚打开页面获取焦点 */}\r\n\r\n                <input ref='a'name=\"a\"onChange={this.handleChange} value={this.state.a} onKeyDown={this.handleInput} type=\"text\"/>\r\n                +\r\n                <input name=\"b\" onChange={this.handleChange} value={this.state.b} onKeyDown={this.handleInput} type=\"text\"/>\r\n                +\r\n                <input name=\"c\" onChange={this.handleChange} value={this.state.c} onKeyDown={this.handleInput} type=\"text\"/>\r\n                =\r\n                <p>{parseInt(this.state.a===''?0:this.state.a)+parseInt(this.state.b===''?0:this.state.b)+parseInt(this.state.c===''?0:this.state.c)}</p>\r\n\r\n                {/* <p>{this.state.a+this.state.b+this.state.c}</p> */}\r\n\r\n\r\n\r\n{/* 非受控组件，一次性获取或处理表单元素的值 */}\r\n                <input ref={(inp)=>{this.inp=inp}} type='text'></input>\r\n                {/* inp和inp对应，this.inp和this.inp对应 */}\r\n\r\n                <button onClick={()=>{console.log(this.inp.value)}}>提交</button>\r\n                {/* onClick={()=>{console.log()}}写上this.state.inputValue可以拿到值 */}\r\n            </div>\r\n\r\n        )\r\n\r\n    }\r\n\r\n}\r\n//受控组件：\r\n//1.给input标签添加value属性，赋值为state的值\r\n//2.给input标签绑定onChange事件，在事件处理函数中setState\r\n//3.一个事件处理函数控制多个表单元素时，给input标签加上name属性，事件处理函数中写\r\n","//输入rcc就可以出来基本结构\r\n//把doing和input引入list里面，把list引入index，这样子通过index找到list，通过list找到其他\r\nimport { thisExpression } from '@babel/types';\r\nimport propTypes from 'prop-types'\r\n\r\n\r\n\r\n\r\nimport React, { Component } from 'react'\r\n\r\nexport default class Todoing extends Component {\r\n    render() {\r\n        var {todo} = this.props;\r\n        return (\r\n            <ul>\r\n                {\r\n                    todo.map((item,idx)=>\r\n                        <li key={idx}>\r\n                            {item}---<button onClick={()=>this.props.del(idx)}>删除</button>\r\n                        </li>)\r\n                }\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nTodoing.propTypes={\r\n    //默认的属性值todo和del\r\n    todo:propTypes.array,\r\n    del:propTypes.func\r\n}\r\n\r\nTodoing.defaultProps=\r\n{\r\n    todo:[1,2,3,4]\r\n}","import React, { Component } from 'react'\r\nimport Todoinput from './Todoinput'\r\nimport Todoing from './Todoing'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            todo:[1,2,3],\r\n            a:100,\r\n            b:200\r\n        }\r\n        // 深拷贝\\浅拷贝\r\n        // var obj = {a:100,b:[1,2,3]};\r\n        // var obj1 = {c:300};\r\n        // var o = {...obj};\r\n        // var o = Object.assign({},obj,obj1);\r\n        // 深拷贝\r\n        // var o = JSON.parse(JSON.stringify(obj));\r\n        // o.b[0] = 200;\r\n        // console.log(o===obj);\r\n        // 遍历对象\r\n        // Object.keys(obj).forEach((item)=>{\r\n        //     console.log(item)\r\n        //     console.log(obj[item])\r\n        // })\r\n\r\n    }\r\n    addItem = (data)=>{\r\n        // this.state.todo.push(data);\r\n        this.setState({\r\n            todo: [...this.state.todo,data]\r\n        })\r\n    }\r\n    delItem = (idx)=>{\r\n        // 1、不能直接改变或处理state，通过setState改变\r\n        let todo = [...this.state.todo];\r\n        todo.splice(idx,1);\r\n        // 2、setState是异步执行\r\n        this.setState((state,props)=>{\r\n            console.log(state.todo);\r\n            return {\r\n                todo: todo\r\n            }\r\n        })\r\n        // 在setState里获取state可能会出错，不是你想要的值\r\n        // 可以像上面那样，把第一个参数写成函数，解决该问题\r\n        // this.setState({\r\n        //     todo: this.state.num + 100\r\n        // },()=>{\r\n        //     console.log(this.state.todo)\r\n        // })\r\n\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Todoinput add={this.addItem}/>\r\n                <Todoing del={this.delItem} todo={this.state.todo}/>\r\n            </div>\r\n        )\r\n    }\r\n}","\nimport React,{Fragment,Component} from 'react';\n\nimport ReactDOM from 'react-dom';\n\nimport ShowTime from './Showtime';\n\nimport './index.css';\n\nimport Todolist from './Todolist/Todolist';\n\n// 函数声明组件\n\n// function ShowTime(props){\n\n//     console.log(props);\n\n//     return (<Fragment>\n\n//                 <div>{props.name}{props.age}</div>\n\n//                 <div>\n\n//                     {new Date().toLocaleString()}\n\n//                 </div>\n\n//             </Fragment>\n\n//         )\n\n// }\n\n\n\n\n\n// 组件交互\n\n// 父组件---->子组件：调用子组件时添加属性，子组件通过props拿到传递的数据\n\n// 子组件---->父组件：\n\n\n\n\n\nReactDOM.render(\n\n    <Todolist/>,\n\n    document.getElementById('root')\n\n)\n\n\n\n\n\n// var num = [1,2,3,4,5];\n\n// ReactDOM.render(\n\n//     <ShowTime age={num} name=\"zhangsan\"/>,\n\n//     document.getElementById('root')\n\n// )\n\n\n\n\n\n\n\n\n\n\n\n// 显示当前系统时间\n\n// function showTime(){\n\n//     var ele = <div>\n\n//                 <p>当前时间是：</p>\n\n//                 <div>{new Date().toLocaleString()}</div>;\n\n//             </div>;\n\n//     ReactDOM.render(\n\n//         ele,\n\n//         document.querySelector('#root')\n\n//     );\n\n// } \n\n// showTime();\n\n// setInterval(showTime,1000);\n\n\n\n\n\n\n\n\n\n\n\n// react技术栈\n\n// jsx语法\n\n// var ele = <h1 class=\"tit\">hello <p>react</p></h1>;\n\n// babel编译，返回一个对象\n\n// var ele = React.createElement(\n\n//     'h1',\n\n//     {id:'tit',class:'title'},\n\n//     'hello',\n\n//     React.createElement(\n\n//         'p',\n\n//         {id:'t',class:'tit'},\n\n//         'react')\n\n// );\n\n// ReactDOM.render(ele, document.getElementById('root'));\n\n// 自己封装render函数\n\nvar obj = {\n\n    type: 'div',\n\n    props: {\n\n        id: 'box',\n\n        class: 'box',\n\n        children: [\n\n            'hello',\n\n            'react',\n\n            {\n\n                type: 'h1',\n\n                props: {\n\n                    id: 'tit',\n\n                    class: 'tit',\n\n                    children: [\n\n                        'title',\n\n                        'react'\n\n                    ]\n\n                }\n\n            }\n\n        ]\n\n    }\n\n}\n\nfunction render(obj,container){\n\n    var {type,props} = obj;\n\n    // 文档碎片\n\n    var fragment = document.createDocumentFragment();\n\n\n\n    var ele = document.createElement(type);\n\n    for(var item in props){\n\n        if(item === 'class'){\n\n            ele.className = props[item]\n\n        }else if(item === 'children'){\n\n            for(var i=0;i<props.children.length;i++){\n\n                // ele.innerHTML += props.children[i];\n\n                if(typeof props.children[i] === 'object'){\n\n                    render(props.children[i],ele);\n\n                }else{\n\n                    var txt = document.createTextNode(props.children[i]);\n\n                    ele.appendChild(txt);\n\n                }\n\n            }\n\n        }else{\n\n            ele[item] = props[item];\n\n        }\n\n    }\n\n    fragment.appendChild(ele);\n\n    container.appendChild(fragment);\n\n}\n\n// render(obj,document.getElementById('root'));\n\n// 页面渲染过程\n\n// 请求HTML页面、浏览器HTML解析器解析html文件、生成DOM树\n\n// link引入css文件、css解析器解析CSS，生成CSS对象模型，CSSOM和DOM tree结合生成一个render tree，最后浏览器绘制页面\n\n\n\n// 页面回流（重排reflow）：DOM结构变化、内容变化、大小、位置的变化、显示的变化\n\n// 页面重绘（repaint）：颜色的变化（背景色、字体颜色、边框颜色）\n\n\n\n// 1、先用变量进行dom处理，最后一次渲染\n\n// console.time('time');\n\n// var div = document.getElementById('root');\n\n// var str = ''\n\n// for(var i=0;i<1000;i++){\n\n//     str += '<p>'+i+'</p>';\n\n// }\n\n// div.innerHTML = str;\n\n// console.timeEnd('time');\n\n// 2、对于样式处理,声明一个css类\n\nvar div = document.getElementById('root');\n\n// div.style.width = '100px';\n\n// div.style.height = '100px';\n\n// div.style.background = 'red';\n\n\n\ndiv.className = 'active';\n\n// 3、offsetLeft、offsetWidth等都会引起回流，要慎用\n\n// console.log(div.offsetLeft);\n\n// var wid = div.offsetWidth;\n\n// setInterval(()=>{\n\n//     wid += 1;\n\n//     div.style.width = wid + 'px';\n\n// },100)\n\n// 4、文档碎片（内存中的一个变量）"],"sourceRoot":""}